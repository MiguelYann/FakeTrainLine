{"version":3,"sources":["components/UserInput/UserInput.tsx","components/customButton/CustomButton.tsx","pages/login/Login.tsx","requestGetStations.ts","components/Ticket/Ticket.tsx","components/searchStation/SearchStation.tsx","components/promoteCode/PromoteCode.tsx","pages/RegisterTrain/RegisterTrain.tsx","pages/profile/ProfileUser.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["UserInput","handlerInput","inputLabel","inputType","name","TextField","className","variant","margin","required","fullWidth","type","label","onChange","CustomButton","title","idButton","handlerOnClick","buttonType","Button","id","onClick","withRouter","props","handleMail","handlePassword","submitLogin","requestGetGare","searchParam","a","async","fetch","response","console","log","json","stations","records","map","station","fields","gare_ut_libelle","then","data","useStyles","makeStyles","theme","createStyles","root","flexGrow","paper","padding","spacing","maxWidth","image","width","height","img","display","maxHeight","Ticket","stationArrival","stationDestination","ticketPrice","classes","Paper","Grid","container","item","xs","sm","direction","Typography","gutterBottom","SearchStation","handlerSelectedArrival","stationsArrival","handlerInputArrival","Autocomplete","options","style","renderInput","params","PromoteCode","handleChange","e","setState","checked","state","mutatePrice","Switch","this","checkedA","value","inputProps","Component","RegisterTrain","userTicket","handleBtn","isEnabledTicket","handleBtnProfile","history","push","userSearchDestination","stationsDestination","selectedArrival","handleInputArrival","userSearchArrival","target","handleSelectedArrival","handleSelectedDestination","selectedDestination","handleInputDestination","prevProps","prevState","snapshot","userSearchWithArrival","stationsFound","userSearchWithDestination","JSON","parse","localStorage","getItem","setItem","stringify","isLoggedInRegistred","ProfileUser","isLoggedInProfile","App","userData","onSubmitLogin","configurationOfAxios","headers","axios","post","email","mailInput","password","passwordInput","res","isLogged","catch","error","handleInputMail","handleInputPassword","isEnabledPromote","render","isLoggedIn","exact","path","isPromote","Boolean","window","location","hostname","match","ReactDOM","basename","process","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.63bbecd3.chunk.js","sourcesContent":["import React from \"react\"\nimport {TextField} from \"@material-ui/core\";\nimport './userInput.style.css'\n\ninterface UserInputProps {\n    inputLabel: string\n    inputType?: string\n    name?: string\n    handlerInput: (e: any) => any,\n}\n\nexport const UserInput = ({handlerInput, inputLabel, inputType, name}: UserInputProps) => {\n\n    return (\n        <>\n            <TextField\n                className={'input'}\n                variant=\"filled\"\n                margin=\"normal\"\n                required\n                fullWidth\n                type={inputType}\n                label={inputLabel}\n                onChange={handlerInput}\n\n            />\n        </>\n    );\n}\n","import React from \"react\";\nimport {Button} from \"@material-ui/core\";\nimport './customButton.style.css';\n\ninterface CustomButtonProps {\n    title: string,\n    idButton: string\n    buttonType?: 'text' | 'outlined' | 'contained'\n    handlerOnClick: () => any;\n}\n\nconst CustomButton = ({title, idButton, handlerOnClick, buttonType}: CustomButtonProps) => {\n    return (\n        <Button id={idButton}\n                variant={buttonType}\n                onClick={handlerOnClick}\n        >\n            {title}\n        </Button>\n    );\n}\nexport default CustomButton;\n","import React from \"react\";\nimport './login.style.css'\nimport {IoMdTrain} from \"react-icons/all\";\nimport {UserInput} from \"../../components/UserInput/UserInput\";\nimport CustomButton from \"../../components/customButton/CustomButton\";\nimport {withRouter} from \"react-router-dom\";\n\nconst Login = (props: any) => {\n    const title = 'Bienvenue sur';\n    const appName = 'FakeTrainLine';\n    return (\n        <>\n            <h1>{title}</h1>\n            <h2>{appName}</h2>\n            <IoMdTrain id={'icon-train'}/>\n\n            <div className={'user-input-panel'}>\n                <UserInput\n                    inputLabel={'Entrer votre email'}\n                    inputType={'email'}\n                    handlerInput={props.handleMail}\n                />\n\n                <UserInput\n                    inputLabel={'Entrer votre mot de passe'}\n                    inputType={'password'}\n                    handlerInput={props.handlePassword}\n                />\n\n                <CustomButton\n                    idButton={'btn-custom'}\n                    buttonType={'contained'}\n                    title={'Connexion'}\n                    handlerOnClick={props.submitLogin}\n                />\n            </div>\n        </>\n    );\n};\nexport default withRouter(Login);\n\n\n","const requestGetGare = async(searchParam:string) => {\n    let response: any;\n    try {\n        response = await fetch(`https://ressources.data.sncf.com/api/records/1.0/search/?dataset=referentiel-gares-voyageurs&q=${searchParam}`);\n\n    } catch (error) {\n        console.log(\" fetch failes\");\n    }\n\n    try {\n        let stations = await response.json();\n        return stations.records.map((station:any) => station.fields.gare_ut_libelle);\n    } catch (error) {\n        console.log(\"gare not found\")\n    }\n};\n\nrequestGetGare(\"lill\")\n    .then(data => console.log(data));\n\nexport default requestGetGare;\n","import React from \"react\";\nimport {Typography} from \"@material-ui/core\";\nimport Grid from \"@material-ui/core/Grid\";\nimport Paper from \"@material-ui/core/Paper\";\nimport {createStyles, makeStyles, Theme} from '@material-ui/core/styles';\nimport {IoMdTrain} from \"react-icons/all\";\nimport './Ticket.style.css'\n\n\ninterface TicketProps {\n    stationArrival: string,\n    stationDestination: string,\n    ticketPrice?: '20 €',\n\n}\n\nconst useStyles = makeStyles((theme: Theme) =>\n    createStyles({\n        root: {\n            flexGrow: 1,\n        },\n        paper: {\n            padding: theme.spacing(2),\n            margin: 'auto',\n            maxWidth: 500,\n        },\n        image: {\n            width: 128,\n            height: 128,\n        },\n        img: {\n            margin: 'auto',\n            display: 'block',\n            maxWidth: '100%',\n            maxHeight: '100%',\n        },\n    }));\n\nconst Ticket = ({stationArrival, stationDestination, ticketPrice,}: TicketProps) => {\n    const classes = useStyles();\n    return (\n\n        <div className={classes.root}>\n            <Paper className={classes.paper}>\n                <Grid container spacing={2}>\n\n                    <Grid item xs={12} sm container>\n                        <Grid item xs container direction=\"column\" spacing={2}>\n\n                            <Grid item xs>\n                                <Grid item>\n                                    <IoMdTrain id={'icon-train'}/>\n                                </Grid>\n                                <Typography>\n                                    <>\n                                        <p><span className={'position-gare'}>Gare de départ</span>\n                                            <p>{stationDestination}</p>\n                                        </p>\n                                    </>\n                                </Typography>\n                            </Grid>\n\n                            <Grid item xs>\n                                <Grid item>\n                                    <IoMdTrain id={'icon-train'}/>\n                                </Grid>\n                                <Typography gutterBottom>\n                                    <>\n                                        <p><span className={'position-gare'}>Gare d'arrivée</span>\n                                            <p>{stationArrival}</p>\n                                        </p>\n                                    </>\n                                </Typography>\n                            </Grid>\n                            <Grid item>\n                                <Typography variant=\"subtitle1\">\n                                    <div className={'divPrice'}>\n                                        <p className={'position-price'}> {ticketPrice}</p>\n                                    </div>\n                                </Typography>\n                            </Grid>\n                        </Grid>\n\n                    </Grid>\n                </Grid>\n            </Paper>\n        </div>\n    );\n\n\n};\nexport default Ticket;\n\n","import React, {Component} from \"react\";\nimport {TextField} from \"@material-ui/core\";\nimport {Autocomplete} from \"@material-ui/lab\";\n\ninterface SearchStationProps {\n    handlerSelectedArrival: (e: any) => any\n    stationsArrival: [],\n    handlerInputArrival: (e: any) => any,\n    label: string\n}\n\nconst SearchStation = ({handlerSelectedArrival, stationsArrival, handlerInputArrival, label}: SearchStationProps) => {\n    return (\n        <Autocomplete\n            onChange={handlerSelectedArrival}\n            id=\"combo-box-demo\"\n            options={stationsArrival}\n            style={{width: 300}}\n            renderInput={params => (\n                <TextField\n                    onChange={handlerInputArrival}\n                    {...params} label={label}\n                    variant=\"outlined\" fullWidth/>\n            )}\n        />\n    );\n}\n\nexport default SearchStation;\n","import React, {Component} from \"react\";\nimport {Switch} from \"@material-ui/core\";\n\n    class PromoteCode extends Component<any, any> {\n        constructor(props:any) {\n            super(props);\n            this.state = {\n                checked: true,\n                mutatePrice: 0\n            }\n        }\n\n    handleChange = (e:string) => {\n        this.setState({\n        checked: false\n        }\n    )\n    };\n\n    render()\n    {\n        return (\n            <div className={'code-promo'}>\n                <p>Activer code promo</p>\n                <Switch\n                    checked={this.state.checkedA}\n                    value=\"checkedA\"\n                    inputProps={{'aria-label': 'secondary checkbox'}}\n                />\n            </div>\n        );\n    }}\n\nexport default PromoteCode;\n","import React, {Component} from \"react\";\nimport requestGetGare from \"../../requestGetStations\";\nimport './registerTrain.style.css';\nimport Ticket from \"../../components/Ticket/Ticket\";\nimport CustomButton from \"../../components/customButton/CustomButton\";\nimport SearchStation from \"../../components/searchStation/SearchStation\";\nimport PromoteCode from \"../../components/promoteCode/PromoteCode\";\nimport {withRouter} from \"react-router-dom\";\n\nclass RegisterTrain extends Component<any, any> {\n    userTicket: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            stationsArrival: [],\n            isEnabledTicket: false,\n            userSearchDestination: '',\n            stationsDestination: [],\n            selectedArrival: '',\n            handleInputArrival: (e: any) => this.setState({userSearchArrival: e.target.value}),\n            handleSelectedArrival: (e: any, value: any) => this.setState({selectedArrival: value}),\n            handleSelectedDestination: (e: any, value: any) => this.setState({selectedDestination: value}),\n            handleInputDestination: (e: any) => this.setState({userSearchDestination: e.target.value})\n        }\n    }\n\n    handleBtn = () => {\n        this.setState({isEnabledTicket: true})\n    };\n\n    handleBtnProfile = () => {\n        this.props.history.push('/profile')\n    };\n\n    componentDidUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n\n        if (this.state.userSearchArrival) {\n            const userSearchWithArrival = this.state.userSearchArrival;\n            requestGetGare(userSearchWithArrival).then(\n                (stationsFound) => this.setState({stationsArrival: stationsFound})\n            );\n        }\n\n        if (this.state.userSearchDestination) {\n            const userSearchWithDestination = this.state.userSearchDestination;\n            requestGetGare(userSearchWithDestination).then(\n                (stationsFound) => this.setState({stationsDestination: stationsFound})\n            );\n        }\n    }\n\n    componentDidMount(): void {\n        this.userTicket = JSON.parse(localStorage.getItem('userTicket') as string);\n        if (localStorage.getItem('userTicket')) {\n            this.setState({\n                stationsArrival: this.userTicket.stationsArrival,\n                isEnabledTicket: this.userTicket.isEnabledTicket,\n                stationsDestination: this.userTicket.stationsDestination,\n                selectedArrival: this.userTicket.selectedArrival,\n                selectedDestination: this.userTicket.selectedDestination\n            })\n        }\n    }\n\n    componentWillUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        localStorage.setItem('userTicket', JSON.stringify(prevState));\n    }\n\n    render() {\n        const {\n            stationsArrival,\n            isEnabledTicket,\n            stationsDestination,\n            selectedArrival,\n            selectedDestination,\n            handleInputArrival,\n            handleSelectedArrival,\n            handleSelectedDestination,\n            handleInputDestination\n        } = this.state;\n\n        return (this.props.isLoggedInRegistred) ?\n            <div className={'item'}>\n                <h1><span id={'span-title'}>Enregistrer</span> vos billets tout de suite</h1>\n                {isEnabledTicket ?\n                    <Ticket\n                        ticketPrice={'20 €'}\n                        stationArrival={selectedArrival}\n                        stationDestination={selectedDestination}\n                    />\n                    : null\n                }\n\n                <CustomButton\n                    title={'Consulter mon profile'}\n                    idButton={'btn-customProfile'}\n                    handlerOnClick={this.handleBtnProfile}\n                />\n\n                <div className={'registrer-train-arrival'}>\n                    <SearchStation\n                        handlerSelectedArrival={handleSelectedArrival}\n                        stationsArrival={stationsArrival}\n                        handlerInputArrival={handleInputArrival}\n                        label={\"Entrez votre gare d'arrivee\"}\n                    />\n                </div>\n\n                <div className={'registrer-train-destination'}>\n                    <SearchStation\n                        handlerSelectedArrival={handleSelectedDestination}\n                        stationsArrival={stationsDestination}\n                        handlerInputArrival={handleInputDestination}\n                        label={\"Entrez votre gare d'arrivee\"}\n                    />\n                </div>\n\n                <div id={'btn-register'}>\n                    <CustomButton\n                        title={'RESERVEZ'}\n                        idButton={'btn-customRegister'}\n                        handlerOnClick={this.handleBtn}\n                    />\n                </div>\n\n                <PromoteCode/>\n            </div>\n            : <h1 id={'erros'}>404 </h1>\n    }\n}\n\nexport default withRouter(RegisterTrain);\n","import React, {Component} from \"react\";\nimport PromoteCode from \"../../components/promoteCode/PromoteCode\";\nimport Ticket from \"../../components/Ticket/Ticket\";\n\nclass ProfileUser extends Component<any, any> {\n\n    constructor(props: any) {\n        super(props);\n    }\n\n    render() {\n        return (this.props.isLoggedInProfile) ?\n            (\n                <>\n                    <h1>Mon Profile</h1>\n                    <Ticket\n                        ticketPrice={'20 €'}\n                        stationArrival={this.props.selectedArrival}\n                        stationDestination={this.props.selectedDestination}\n                    />\n                    <PromoteCode/>\n                </>) :\n\n            <h1>Indisponible car vous n'etes pas connecté</h1>\n    }\n}\n\nexport default ProfileUser\n","import React, {Component} from 'react';\nimport './App.css';\nimport Login from \"./pages/login/Login\";\nimport {Route, withRouter} from 'react-router-dom';\nimport RegisterTrain from \"./pages/RegisterTrain/RegisterTrain\";\nimport axios from \"axios\";\nimport ProfileUser from \"./pages/profile/ProfileUser\";\n\nclass App extends Component<any, any> {\n    userData: any;\n\n    constructor(props: any) {\n        super(props);\n        this.state = {\n            mailInput: '',\n            passwordInput: '',\n            isEnabledPromote: true,\n            isLogged: false\n        }\n    }\n\n    changePromote() {\n        this.setState({\n            isEnabledPromote: false\n        })\n    }\n\n    onSubmitLogin = async () => {\n        const urlApi = 'https://reqres.in/api/login';\n        const configurationOfAxios = {\n            headers: {'Content-Type': 'application/json'},\n        };\n        axios.post(urlApi, {email: this.state.mailInput, password: this.state.passwordInput}, configurationOfAxios)\n            .then((res) => {\n                this.setState({isLogged: true});\n                this.props.history.push('/registerTrain')\n            })\n            .catch((error) => {\n                console.log(this.state.isLogged);\n                this.setState({isLogged: false})\n            });\n        this.props.history.push('/registerTrain',);\n    };\n\n    handleInputMail = (e: any) => this.setState({mailInput: e.target.value});\n    handleInputPassword = (e: any) => this.setState({passwordInput: e.target.value});\n\n    componentDidMount(): void {\n        this.userData = JSON.parse(localStorage.getItem('user') as string);\n        if (localStorage.getItem('user')) {\n            this.setState({\n                mailInput: this.userData.mailInput,\n                passwordInput: this.userData.passwordInput,\n                isLogged: this.userData.isLogged\n            })\n        }\n    }\n\n    componentWillUpdate(prevProps: Readonly<any>, prevState: Readonly<any>, snapshot?: any): void {\n        localStorage.setItem('user', JSON.stringify(prevState));\n    }\n\n    render() {\n        const {mailInput, passwordInput, isEnabledPromote, isLogged} = this.state;\n        return (\n            <div className=\"App\">\n                <Route\n                    render=\n                        {\n                            () => <Login\n                                submitLogin={this.onSubmitLogin}\n                                isLoggedIn={isLogged}\n                                handleMail={this.handleInputMail}\n                                handlePassword={this.handleInputPassword}\n                                email={mailInput}\n                                password={passwordInput}\n                            />}\n                    exact path={'/'}\n                />\n\n                <Route\n                    render=\n                        {\n                            () => <RegisterTrain\n                                isLoggedInRegistred={isLogged}\n                            />\n                        }\n                    path={'/registerTrain'}\n                />\n\n                <Route\n                    render=\n                        {\n                            () => <ProfileUser\n                                isLoggedInProfile={isLogged}\n                                isPromote={isEnabledPromote}/>\n                        }\n                    path={'/profile'}\n                />\n\n            </div>\n        )\n    }\n};\n\nexport default withRouter(App);\n\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport {BrowserRouter} from \"react-router-dom\";\n\nReactDOM.render(\n    <BrowserRouter basename={process.env.PUBLIC_URL}>\n        <App/>\n    </BrowserRouter>,\n    document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}